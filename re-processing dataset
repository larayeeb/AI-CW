from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

df = pd.read_csv('Loan Approval Dataset.csv')  #place name of your dataset file within single quotations, which Reads the dataset and store it in a variable called 'df'
print(df.head())  #Display the first few rows of the DataFrame to inspect the data.
print(df.info())  #Provides information about the DataFrame.
print(df.isnull().sum())  #Prints the number of missing values for each column in the DataFrame. This helps identify columns with missing data.

df['Dependents'].fillna(df['Dependents'].mode()[0], inplace=True)
df['Home Type'].fillna(df['Home Type'].mode()[0], inplace=True)
df['Employment'].fillna(df['Employment'].mode()[0], inplace=True)
df['Name'].fillna(df['Name'].mode()[0], inplace=True)#Reshape the column to a 2D array for imputer
print(df.isnull().sum()) # Verify if missing values are handled.

df_encoded = pd.get_dummies(df, columns=['Home Type', 'Dependents', 'Employment', 'Name'])
#print(df_encoded.head())  # Display the updated DataFrame after encoding

X = df_encoded.drop('Loan Approval History', axis=1)
y = df_encoded['Loan Approval History']
print(X.head())
print(y.head())

# Assuming 'df' is your original DataFrame
percentage_cols = ['On-Time Payment History','Missed/Late Payment History']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Decision Tree classifier
clf = DecisionTreeClassifier(random_state=42)

# Train the classifier
clf.fit(X_train, y_train)

# Make predictions on the test set
predictions = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")
